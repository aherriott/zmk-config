/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT		0
#define NAV			1
#define SYM			2
#define QWERTY		3

#define THUMB_NONE 	&none &none &none &none
#define XXX 		&none

#define QUICK_TAP_MS_DEFAULT 125

#define CUSTOM_SHIFT(mm_name, key_1, key_2)	{ 		\
	mm_name: mm_name-custom-shift {					\
            compatible = "zmk,behavior-mod-morph";	\
            label = "mm_name_CUSTOM_SHIFT";			\
            #binding-cells = <0>;					\
            bindings = <&kp key_1>, <&kp key_2>;	\
            mods = <(MOD_LSFT|MOD_RSFT)>;			\
    }												\
}

// Unimplemented features
#define L_MOUSE XXX
#define R_MOUSE XXX
#define M_MOUSE XXX
#define SW_APP_0 XXX
#define SW_APP_1 XXX
#define SW_APP_2 XXX
#define SW_APP_3 XXX

&lt {
	quick-tap-ms = <QUICK_TAP_MS_DEFAULT>;
};

&mt {
	quick-tap-ms = <QUICK_TAP_MS_DEFAULT>;
};

/ {
	behaviors {
		hrm: home-row-mod {
			compatible = "zmk,behavior-hold-tap";
			label = "HOME_ROW_MOD";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <QUICK_TAP_MS_DEFAULT>;
			global-quick-tap;
			bindings = <&kp>, <&kp>;
		};
		tlt: toggle-layer-tap {
			compatible = "zmk,behavior-hold-tap";
			label = "TOGGLE_LAYER_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <QUICK_TAP_MS_DEFAULT>;
			bindings = <&tog>, <&kp>;
		};
		lot: long-tap {
			compatible = "zmk,behavior-hold-tap";
			label = "LONG_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <1000>;
			bindings = <&kp>, <&kp>;
		};
		rsb: reset-bootloader {
			compatible = "zmk,behavior-tap-dance";
            label = "RESET_BOOTLOADER";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&reset>, <&bootloader>, <&out OUT_TOG>, <&tog QWERTY>;
		};

		/**
		 * Custom shifted keys
		 */
		CUSTOM_SHIFT(comma_qmark, COMMA, QMARK);
		CUSTOM_SHIFT(semi_tilde, SEMI, TILDE);
		CUSTOM_SHIFT(dot_excl, DOT, EXCL);
		CUSTOM_SHIFT(fslh_bslh, FSLH, BSLH);
		CUSTOM_SHIFT(f1_f10, F1, F10);
		CUSTOM_SHIFT(f2_f11, F2, F11);
		CUSTOM_SHIFT(f3_f12, F3, F12);
		CUSTOM_SHIFT(f4_f13, F4, F13);
		CUSTOM_SHIFT(f5_f14, F5, F14);
		CUSTOM_SHIFT(f6_f15, F6, F15);
		CUSTOM_SHIFT(f7_f16, F7, F16);
		CUSTOM_SHIFT(f8_f17, F8, F17);
		CUSTOM_SHIFT(f9_f18, F9, F18);
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
	XXX	&kp Q      	&kp W       &kp F        	&kp P       	&kp B                		&kp J		&kp L       	&kp U           &kp Y      		&semi_tilde	XXX
	XXX	&hrm LGUI A	&hrm LALT R	&hrm LSHIFT S	&hrm LCTRL T	&kp G                       &kp M       &hrm RCTRL N	&hrm RSHIFT E  	&hrm RALT I		&hrm RGUI O	XXX
	XXX	&kp Z      	&kp X       &kp C        	&kp D       	&kp V 		THUMB_NONE    	&kp K       &kp H      		&comma_qmark	&dot_excl		&fslh_bslh 	XXX
		&rsb       	&key_repeat &kp DEL    		&tlt NAV BSPC	&kp RET              		&kp TAB		&lt SYM SPACE	&kp ESC        	&key_repeat		&rsb
			>;

			sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN &inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
		};


		/*
		*   Features (mostly ordered by importance):
		*		ENG: DOT, COMMA, QMARK, EXCL
		*			SEMI, COLON, DQT, SQT
		* 		C: SEMI, EQUAL, LPAR, RPAR, LBRC, RBRC, UNDER,
		*			EXCL, SQT, DQT, PRCNT, MULT, PLUS, MINUS, LT, GT, LBKT, RBKT, AMPS, PIPE, HASH,
		* 			QMARK, 
		*		bash: SQT, DQT, TILDE, FSLH, DLLR, AMPS, PIPE
		*			LBRC, RBRC, GT, MULT,
		*        
		*		Low usage: AT, GRAVE, BSLH, CARET
		*/
		sym_layer {
			bindings = <
	XXX	&kp GT		&kp N1	&kp N2	&kp N3	&kp PLUS                &kp PRCNT  	&kp LBKT 	&kp RBKT 	&kp AMPS    &kp AT		XXX
	XXX	&kp EQUAL	&kp N4	&kp N5	&kp N6	&kp MULT				&kp COLON	&kp LPAR 	&kp RPAR    &kp UNDER  	&caps_word	XXX
	XXX	&kp LT		&kp N7	&kp N8	&kp N9	&kp MINUS	THUMB_NONE	&kp DLLR   	&kp LBRC 	&kp RBRC	&kp PIPE   	&kp HASH	XXX
	        &trans	&trans	&kp SQT	&kb N0  &kp DQT                 &kp GRAVE  	XXX 		&kp CARET	XXX			XXX
			>;

			sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN &inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
		};

		/*
		*   Features:
		*		Arrows (L hand): LEFT, RIGHT, UP, DOWN
		*		Mouse (L hand):  LEFT, RIGHT, MIDDLE, BACK, FORWARD
		*		Mods (L hand): LCTRL, LSHIFT, LALT
		*		Actions: Ctrl c, ctrl x, ctrl v, PRSCRN, Ctrl Z, Ctrl Y
		*		Media: 	C_VOL_UP, C_VOL_DN, C_MUTE, 
		*				video (ctrl alt v), screenshare (ctrl alt s), leave (ctrl alt e)
		*		BT: BT_NEXT, BT_CLR
		*		*/

		nav_layer {
			bindings = <
	XXX	&kp LA(RIGHT)	&kp K_SCROLL_DOWN	&kp UP				&kp K_SCROLL_UP		&key_repeat            		&kp C_VOL_UP	&f1_f10 	&f2_f11		&f3_f12				XXX			XXX
	XXX	&kp LA(LEFT)	&kp LEFT			&kp DOWN			&kp RIGHT			&kp LG(TAB)					&kp C_MUTE 		&f4_f13 	&f5_f14		&f6_f15  			&kp PRSCRN	XXX
	XXX	&kp LC(Z)		&hrm LALT LC(X)		&hrm LSHIFT LC(C)	&hrm LCTRL LC(V)	&kp LC(Y)	THUMB_NONE 		&kp C_VOL_DN	&f7_f16		&f8_f17		&f9_f18				XXX			XXX
		XXX				&tog NAV			M_MOUSE				L_MOUSE				R_MOUSE						SW_APP_0		SW_APP_1	SW_APP_2	&lot BT_CLR BT_NEXT	XXX
			>;

			sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN &inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
		};

		qwerty_layer {
			bindings = <
	XXX	&kp Q		&kp W  		&kp E  			&kp R  			&kp T                 &kp Y  	&kp U			&kp I     		&kp O   	&kp P       	XXX  
	XXX	&hrm LGUI A	&hrm LALT S	&hrm LSHIFT R	&hrm LCTRL T	&kp G                 &kp H  	&hrm RCTRL J	&hrm RSHIFT K	&hrm RALT L	&hrm RGUI SEMI	XXX  
	XXX	&kp Z 		&kp X  		&kp C  			&kp V  			&kp B   THUMB_NONE    &kp N  	&kp M  			&kp COMMA 		&kp DOT 	&kp FSLH    	XXX  
		&tog QWERTY	&trans 		&trans 			&trans 			&trans                &trans	&trans 			&trans    		&trans  	&tog QWERTY
			>;

			sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN &inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
		};
	};
};
