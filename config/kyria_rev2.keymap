/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#include "helper.h"

#define DEFAULT		0
#define QWERTY		1
#define MOUSE		2
#define SYM			3
#define NAV			4
#define NUM			5
#define FUN			6

#define THUMB_NONE 	&none &none &none &none
#define XXX 		&none

#define HYPER_M(X) LG(LA(LS(LC(X))))
#define HYPER LG(LA(LS(LCTRL)))

/**
 * Key indices:
 * 1-5		6-10
 * 13-17	18-22
 * 25-29	34-38
 * 40-44	45-49
 */
#define KEYS_L	1  2  3  4  5	\
				13 14 15 16 17	\
				25 26 27 28 29
#define KEYS_R  6  7  8  9  10	\
				18 19 20 21 22	\
				34 35 36 37 38
#define KEYS_T	40 41 42 43 44	\
				45 46 47 48 49

#define SW_APP_0 &kp HYPER_M(N0)
#define SW_APP_1 &kp HYPER_M(N1)
#define SW_APP_2 &kp HYPER_M(N2)
#define SW_APP_3 &kp HYPER_M(N3)

&lt {
	quick-tap-ms = <200>;
};

&mt {
	quick-tap-ms = <200>;
};

/**
 * Home row hold-taps
*/

/* left-hand HRMs */
ZMK_BEHAVIOR(hrml, hold_tap, 
	flavor = "balanced";
	tapping-term-ms = <280>;
	quick-tap-ms = <175>;                // repeat on tap-into-hold
	// global-quick-tap-ms = <150>;         // requires PR #1387
	global-quick-tap;
	bindings = <&kp>, <&kp>;
	hold-trigger-key-positions = <KEYS_R KEYS_T>;
	// hold-trigger-on-release;             // requires PR #1423
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hrmr, hold_tap,
	flavor = "balanced";
	tapping-term-ms = <280>;
	quick-tap-ms = <175>;                // repeat on tap-into-hold
	// global-quick-tap-ms = <150>;         // requires PR #1387
	global-quick-tap;
	bindings = <&kp>, <&kp>;
	hold-trigger-key-positions = <KEYS_L KEYS_T>;
	// hold-trigger-on-release;             // requires PR #1423
)

/**
 * Tap Dances
*/

/* Tap copy, double tap cut */
ZMK_BEHAVIOR(copy_cut, tap_dance,
	tapping-term-ms = <200>;
	bindings = <&kp LC(C)>, <&kp LC(X)>;
)

/* Tap undo, double tap redo */
ZMK_BEHAVIOR(undo_redo, tap_dance,
	tapping-term-ms = <200>;
	bindings = <&kp LC(Z)>, <&kp LC(Y)>;
)

/* Tap back, double tap forward */
ZMK_BEHAVIOR(back_forward, tap_dance,
	tapping-term-ms = <200>;
	bindings = <&kp LA(LEFT)>, <&kp LA(RIGHT)>;
)

/**
 * Custom shifted keys
 */

ZMK_MOD_SHIFT(comma_qmark, COMMA, QMARK)
ZMK_MOD_SHIFT(semi_tilde, SEMI, TILDE)
ZMK_MOD_SHIFT(dot_excl, DOT, EXCL)
ZMK_MOD_SHIFT(fslh_bslh, FSLH, BSLH)

/**
 * Macros
*/

ZMK_BEHAVIOR(end_dot, macro,
	wait-ms = <30>;
	tap-ms = <40>;
	bindings = <&kp DOT &kp SPACE &sk LSHIFT>;
)
ZMK_BEHAVIOR(end_qmark, macro,
	wait-ms = <30>;
	tap-ms = <40>;
	bindings = <&kp QMARK &kp SPACE &sk LSHIFT>;
)

/**
 * Combos
 * 
 * Key indices:
 * 0-5		6-11
 * 12-17	18-23
 * 24-29	34-39
 * 40-44	45-50
*/

/ {
	combos {
        compatible = "zmk,combos";
        combo_mouse_enter {
            timeout-ms = <50>;
            key-positions = <2 3 4>; /* W F P */
            bindings = <&tog MOUSE>;
			layers = <DEFAULT>;
        };
		combo_mouse_enter_do_nothing {
            timeout-ms = <50>;
            key-positions = <2 3 4>; /* W F P */
            bindings = <&none>;
			layers = <MOUSE>;
        };
		combo_exit_all {
			timeout-ms = <50>;
            key-positions = <7 8 9>; /* L U Y */
            bindings = <&to DEFAULT>;
		};
		combo_num_word {
            timeout-ms = <50>;
            key-positions = <3 4>; /* F P */
            bindings = <&tog NUM>;
        };
		combo_caps_word {
            timeout-ms = <50>;
            key-positions = <7 8>; /* L U */
            bindings = <&caps_word>;
        };
    };
};

/**
 * Keymap
*/

/ {
	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
	XXX	&kp Q      	&kp W       &kp F   &kp P       	&kp B                	&kp J			&kp L			&kp U           &kp Y      	&semi_tilde		XXX
	XXX	&kp A		&kp R		&kp S	&kp T			&kp G                   &kp M       	&kp N			&kp E  			&kp I		&kp O			XXX
	XXX	&kp Z      	&kp X       &kp C   &kp D       	&kp V		THUMB_NONE	&kp K       	&kp H   		&comma_qmark	&dot_excl	&fslh_bslh 		XXX
		&tog QWERTY	&key_repeat	&kp DEL	&lt NAV BSPC	&lt NUM RET            	&mt RSHIFT TAB 	&lt SYM SPACE	&kp ESC        	&key_repeat	&tog QWERTY
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};

		qwerty_layer {
			bindings = <
	XXX	&kp Q			&kp W  			&kp E  			&kp R  			&kp T                 &kp Y  	&kp U			&kp I     		&kp O   		&kp P       	XXX  
	XXX	&hrml LGUI A	&hrml LALT S	&hrml LSHIFT R	&hrml LCTRL T	&kp G                 &kp H  	&hrmr RCTRL J	&hrmr RSHIFT K	&hrmr RALT L	&hrmr RGUI SEMI	XXX  
	XXX	&kp Z 			&kp X  			&kp C  			&kp V  			&kp B   THUMB_NONE    &kp N  	&kp M  			&kp COMMA 		&kp DOT 		&kp FSLH    	XXX  
		&tog QWERTY		&trans 			&trans 			&trans 			&trans                &trans	&trans 			&trans    		&trans  		&tog QWERTY
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};

		mouse_layer {
			bindings = <
	XXX	SW_APP_3	SW_APP_2    	SW_APP_1	SW_APP_0	XXX						XXX	XXX	XXX	XXX XXX	XXX
	XXX	&mkp MCLK	&back_forward	&mkp RCLK	&mkp LCLK	XXX						XXX	XXX	XXX	XXX XXX	XXX
	XXX	&sk LGUI	&sk LALT		&sk LSHIFT	&sk LCTRL	XXX			THUMB_NONE 	XXX	XXX	XXX	XXX XXX	XXX
		XXX			&trans			&trans		&trans		&trans					XXX	XXX	XXX	XXX XXX
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};

		/**
		*   Features (mostly ordered by importance):
		*		ENG: DOT, COMMA, QMARK, EXCL, AT
		*			SEMI, COLON, DQT, SQT
		* 		C: SEMI, EQUAL, LPAR, RPAR, LBRC, RBRC, UNDER,
		*			EXCL, SQT, DQT, PRCNT, STAR, PLUS, MINUS, LT, GT, LBKT, RBKT, AMPS, PIPE, HASH,
		* 			QMARK, 
		*		bash: SQT, DQT, TILDE, FSLH, DLLR, MINUS, AMPS, PIPE
		*			LBRC, RBRC, GT, STAR,
		*        
		*		Low usage: GRAVE, BSLH, CARET
		*/

		sym_layer {
			bindings = <
	XXX	&kp GT		&kp AMPS	&kp PLUS	&kp LBRC	&kp RBRC               	&kp CARET	&kp COLON	&kp DLLR	&kp PRCNT   XXX			XXX
	XXX	&kp EQUAL	&kp UNDER 	&kp MINUS	&kp LPAR	&kp RPAR				&sk HYPER	&sk RCTRL	&sk RSHIFT	&sk RALT	&sk RGUI	XXX
	XXX	&kp LT		&kp PIPE 	&kp STAR	&kp LBKT	&kp RBKT	THUMB_NONE	&kp GRAVE	&kp AT		&kp HASH	&end_dot	XXX			XXX
	    XXX			XXX			XXX			&kp SQT		&kp DQT     			XXX 		XXX 		XXX			XXX			XXX
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};

		/**
		*   Features:
		*		Arrows (L hand): LEFT, RIGHT, UP, DOWN
		*		Mouse (L hand):  LEFT, RIGHT, MIDDLE, BACK, FORWARD
		*		Mods (L hand): LCTRL, LSHIFT, LALT
		*		Actions: Ctrl c, ctrl x, ctrl v, PRSCRN, Ctrl Z, Ctrl Y, ctrl S
		*		Media: 	C_VOL_UP, C_VOL_DN, C_MUTE, 
		*				video (ctrl alt v), screenshare (ctrl alt s), leave (ctrl alt e)
		*		BT: BT_NEXT, BT_CLR
		*
		* missing: hbt BT_CLR BT_NXT
		*/

		nav_layer {
			bindings = <
	XXX	&kp PSCRN	&kp HOME	&kp UP		&kp END		XXX			           		XXX			XXX			XXX			XXX			XXX			XXX
	XXX	&kp LC(S)	&kp LEFT	&kp DOWN	&kp RIGHT	&kp LA(TAB)					&sk HYPER	&sk RCTRL	&sk RSHIFT	&sk RALT	&sk RGUI	XXX
	XXX	XXX			&undo_redo	&copy_cut	&kp LC(V)	XXX				THUMB_NONE 	XXX			XXX			XXX			XXX			XXX			XXX
		&bootloader	XXX			XXX			XXX			XXX							SW_APP_0	SW_APP_1	SW_APP_2	SW_APP_3	&bootloader
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};

		num_layer {
			bindings = <
	XXX	XXX			XXX			XXX			XXX			XXX						XXX		&kp N7	&kp N8	&kp N9	XXX			XXX
	XXX	&sk LGUI	&sk LALT	&sk LSHIFT	&sk LCTRL	&sk HYPER				XXX		&kp N4	&kp N5	&kp N6	&tog NUM	XXX
	XXX	XXX			XXX			XXX			XXX			XXX			THUMB_NONE 	XXX		&kp N1	&kp N2	&kp N3	XXX			XXX
		XXX			&trans		&trans		&trans		&trans					&mo FUN	&trans	&kp N0	XXX 	XXX
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};

		fun_layer {
			bindings = <
	XXX	XXX			XXX			XXX			XXX			XXX						XXX		&kp F7	&kp F8	&kp F9	&kp F10	XXX
	XXX	&sk LGUI	&sk LALT	&sk LSHIFT	&sk LCTRL	&sk HYPER				XXX		&kp F4	&kp F5	&kp F6	&kp F11	XXX
	XXX	XXX			XXX			XXX			XXX			XXX			THUMB_NONE 	XXX		&kp F1	&kp F2	&kp F3	&kp F12	XXX
		XXX			&trans		&trans		&trans		&trans					&trans	&trans	&kp N0	XXX 	XXX
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};
	};
};
