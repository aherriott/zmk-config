/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT		0
#define SYM			1
#define NAV			2
#define MOUSE		3
#define QWERTY		4

#define THUMB_NONE 	&none &none &none &none
#define XXX 		&none

/**
 * Key indices:
 * 1-5		6-10
 * 13-17	18-22
 * 25-29	34-38
 * 40-44	45-49
 */
#define KEYS_L	1  2  3  4  5	\
				13 14 15 16 17	\
				25 26 27 28 29
#define KEYS_R  6  7  8  9  10	\
				18 19 20 21 22	\
				34 35 36 37 38
#define KEYS_T	40 41 42 43 44	\
				45 46 47 48 49

#define QUICK_TAP_MS_DEFAULT 200

// Unimplemented features
#define SW_APP_0 XXX
#define SW_APP_1 XXX
#define SW_APP_2 XXX
#define SW_APP_3 XXX

&lt {
	quick-tap-ms = <QUICK_TAP_MS_DEFAULT>;
};

&mt {
	quick-tap-ms = <QUICK_TAP_MS_DEFAULT>;
};

/ {
	behaviors {
		// hrm: home-row-mod {
		// 	compatible = "zmk,behavior-hold-tap";
		// 	label = "HOME_ROW_MOD";
		// 	#binding-cells = <2>;
		// 	flavor = "tap-preferred";
		// 	tapping-term-ms = <200>;
		// 	quick-tap-ms = <QUICK_TAP_MS_DEFAULT>;
		// 	bindings = <&kp>, <&kp>;
		// };

		/* left-hand HRMs */
		hrml: left-home-row-mod {
			compatible = "zmk,behavior-hold-tap";
			label = "LEFT_HOME_ROW_MOD";
			#binding-cells = <2>;
		    flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;                // repeat on tap-into-hold
			// global-quick-tap-ms = <150>;         // requires PR #1387
			global-quick-tap;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_R KEYS_T>;
			// hold-trigger-on-release;             // requires PR #1423
		};

		/* right-hand HRMs */
		hrmr: right-home-row-mod {
			compatible = "zmk,behavior-hold-tap";
			label = "RIGHT_HOME_ROW_MOD";
			#binding-cells = <2>;
		    flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;                // repeat on tap-into-hold
			// global-quick-tap-ms = <150>;         // requires PR #1387
			global-quick-tap;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <KEYS_L KEYS_T>;
			// hold-trigger-on-release;             // requires PR #1423
		};

		/**
		 * Custom shifted keys
		 */
		comma_qmark: comma_qmark-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "comma_qmark_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
		semi_tilde: semi_tilde-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "semi_tilde_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
		dot_excl: dot_excl-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "dot_excl_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
		fslh_bslh: fslh_bslh-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "fslh_bslh_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
		f1_f10: f1_f10-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "f1_f10_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp F1>, <&kp F10>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
   	 	};
		f2_f11: f2_f11-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "f2_f11_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp F2>, <&kp F11>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
		f3_f12: f3_f12-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "f3_f12_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp F3>, <&kp F12>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
		f4_f13: f4_f13-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "f4_f13_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp F4>, <&kp F13>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
		f5_f14: f5_f14-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "f5_f14_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp F5>, <&kp F14>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
		f6_f15: f6_f15-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "f6_f15_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp F6>, <&kp F15>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
		f7_f16: f7_f16-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "f7_f16_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp F7>, <&kp F16>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
		f8_f17: f8_f17-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "f8_f17_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp F8>, <&kp F17>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
		f9_f18: f9_f18-custom-shift {
            compatible = "zmk,behavior-mod-morph";
            label = "f9_f18_CUSTOM_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp F9>, <&kp F18>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
    	};
	};

	combos {
		/**
		 * Key indices:
		 * 0-5		6-11
		 * 12-17	18-23
		 * 24-29	34-39
		 * 40-44	45-50
		 */
        compatible = "zmk,combos";
        combo_mouse_enter {
            timeout-ms = <50>;
            key-positions = <2 3 4>; /* W F P */
            bindings = <&tog MOUSE>;
			layers = <DEFAULT>;
        };
		combo_mouse_enter_do_nothing {
            timeout-ms = <50>;
            key-positions = <2 3 4>; /* W F P */
            bindings = <&none>;
			layers = <MOUSE>;
        };
		combo_mouse_exit {
			timeout-ms = <50>;
            key-positions = <7 8 9>; /* L U Y */
            bindings = <&tog MOUSE>;
			layers = <MOUSE>;
		};
		combo_mouse_exit_do_nothing {
			timeout-ms = <50>;
            key-positions = <7 8 9>; /* L U Y */
            bindings = <&none>;
			layers = <DEFAULT>;
		};
    };

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
	XXX	&kp Q      		&kp W       	&kp F        	&kp P       	&kp B                		&kp J		&kp L       	&kp U           &kp Y      		&semi_tilde		XXX
	XXX	&hrml LGUI A	&hrml LALT R	&hrml LSHIFT S	&hrml LCTRL T	&kp G                       &kp M       &hrmr RCTRL N	&hrmr RSHIFT E  &hrmr RALT I	&hrmr RGUI O	XXX
	XXX	&kp Z      		&kp X       	&kp C        	&kp D       	&kp V 		THUMB_NONE    	&kp K       &kp H      		&comma_qmark	&dot_excl		&fslh_bslh 		XXX
		&tog QWERTY		&key_repeat		&kp DEL    		&lt NAV BSPC	&kp RET              		&kp TAB		&lt SYM SPACE	&kp ESC        	&key_repeat		&tog QWERTY
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};


		/**
		*   Features (mostly ordered by importance):
		*		ENG: DOT, COMMA, QMARK, EXCL
		*			SEMI, COLON, DQT, SQT
		* 		C: SEMI, EQUAL, LPAR, RPAR, LBRC, RBRC, UNDER,
		*			EXCL, SQT, DQT, PRCNT, STAR, PLUS, MINUS, LT, GT, LBKT, RBKT, AMPS, PIPE, HASH,
		* 			QMARK, 
		*		bash: SQT, DQT, TILDE, FSLH, DLLR, MINUS, AMPS, PIPE
		*			LBRC, RBRC, GT, STAR,
		*        
		*		Low usage: AT, GRAVE, BSLH, CARET
		*/

		sym_layer {
			bindings = <
	XXX	&kp GT				&kp N1			&kp N2			&kp N3			&kp PLUS                &kp PRCNT  	&kp COLON 			&kp AT 				&kp AMPS    		&kp HASH	XXX
	XXX	&hrml LGUI MINUS	&hrml LALT N4	&hrml LSHIFT N5	&hrml LCTRL N6	&kp EQUAL				&kp LBKT	&hrmr RCTRL LPAR	&hrmr RSHIFT LBRC	&hrmr RALT UNDER	&caps_word	XXX
	XXX	&kp LT				&kp N7			&kp N8			&kp N9			&kp STAR	THUMB_NONE	&kp RBKT	&kp RPAR 			&kp RBRC			&kp PIPE   			&kp DLLR	XXX
	    XXX					&trans			&kp N0			&kp SQT			&kp DQT                 &kp GRAVE  	XXX 				&kp CARET			&trans				XXX
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};

		/**
		*   Features:
		*		Arrows (L hand): LEFT, RIGHT, UP, DOWN
		*		Mouse (L hand):  LEFT, RIGHT, MIDDLE, BACK, FORWARD
		*		Mods (L hand): LCTRL, LSHIFT, LALT
		*		Actions: Ctrl c, ctrl x, ctrl v, PRSCRN, Ctrl Z, Ctrl Y, ctrl S
		*		Media: 	C_VOL_UP, C_VOL_DN, C_MUTE, 
		*				video (ctrl alt v), screenshare (ctrl alt s), leave (ctrl alt e)
		*		BT: BT_NEXT, BT_CLR
		*
		* missing: hbt BT_CLR BT_NXT
		*/

		nav_layer {
			bindings = <
	XXX	XXX					&kp HOME		&kp UP				&kp END				&kp LC(S)	           		&kp C_VOL_UP		&f1_f10 			&f2_f11					&f3_f12		XXX			XXX
	XXX	&hrml LGUI LC(A)	&hrml LALT LEFT	&hrml LSHIFT DOWN	&hrml LCTRL RIGHT	&kp LA(TAB)					&kp C_MUTE 			&f4_f13 			&f5_f14					&f6_f15 	&kp PSCRN	XXX
	XXX	&kp LC(Z)			&kp LC(X)		&kp LC(C)			&kp	LC(Y)			&kp LC(V)		THUMB_NONE 	&kp C_VOL_DN		&f7_f16				&f8_f17					&f9_f18		XXX			XXX
		&bootloader		XXX				XXX					XXX					XXX							&mt RSHIFT SW_APP_0	&mt RCTRL SW_APP_1	&mt RC(RSHIFT) SW_APP_3	XXX			&bootloader
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};

		mouse_layer {
			bindings = <
	XXX	&kp LA(RIGHT)		&kp HOME		&kp UP				&kp END				&kp LC(S)            		XXX	XXX	XXX	XXX XXX	XXX
	XXX	&hrml LGUI LA(LEFT)	&hrml LALT LEFT	&hrml LSHIFT DOWN	&hrml LCTRL RIGHT	&kp LA(TAB)					XXX	XXX	XXX	XXX XXX	XXX
	XXX	&kp LC(Z)			&kp LC(X)		&kp LC(C)			&kp LC(Y)			&kp LC(V)		THUMB_NONE 	XXX	XXX	XXX	XXX XXX	XXX
		XXX					&kp BSPC		&kp RET				&mkp LCLK			&mkp RCLK					XXX	XXX	XXX	XXX XXX
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};

		qwerty_layer {
			bindings = <
	XXX	&kp Q		&kp W  		&kp E  			&kp R  			&kp T                 &kp Y  	&kp U			&kp I     		&kp O   	&kp P       	XXX  
	XXX	&hrml LGUI A	&hrml LALT S	&hrml LSHIFT R	&hrml LCTRL T	&kp G                 &kp H  	&hrmr RCTRL J	&hrmr RSHIFT K	&hrmr RALT L	&hrmr RGUI SEMI	XXX  
	XXX	&kp Z 		&kp X  		&kp C  			&kp V  			&kp B   THUMB_NONE    &kp N  	&kp M  			&kp COMMA 		&kp DOT 	&kp FSLH    	XXX  
		&tog QWERTY	&trans 		&trans 			&trans 			&trans                &trans	&trans 			&trans    		&trans  	&tog QWERTY
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp PG_UP PG_DN>;
		};
	};
};
